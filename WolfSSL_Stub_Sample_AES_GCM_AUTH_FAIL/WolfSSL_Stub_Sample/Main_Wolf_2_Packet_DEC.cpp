// OpenSSL_Stub.cpp : This file contains the 'main' function. Program execution begins and ends there.

#include <iostream>
#include <openssl/evp.h>

#define GCM_AUTH_TAG_LEN 16
#define SRTCP_E_BIT 0x80000000

void Create_Context(EVP_CIPHER_CTX** ctx);
int Destroy_Context(EVP_CIPHER_CTX* ctx);
int Init_Context(EVP_CIPHER_CTX* ctx, const EVP_CIPHER** evp, const uint8_t* key, int KeySize);
int Set_IV(EVP_CIPHER_CTX* ctx, uint8_t* iv, int isEncDir);
int Set_aad(EVP_CIPHER_CTX* ctx, unsigned char* inbuf, int tagLen, int addLen, unsigned char dummy_tag[GCM_AUTH_TAG_LEN]);
void Encrypt_Data(EVP_CIPHER_CTX* ctx, unsigned char* inbuf, unsigned char* Outbuf, int encLen, unsigned char* AuthTag, int tag_len);
int Decrypt_Data(EVP_CIPHER_CTX* ctx, unsigned char* EncData, unsigned char* DecData, int encLen, int tag_len);
void print_buffer(const char* name, unsigned char* data, int len);


int main()
{
    //Declaration: Start
    EVP_CIPHER_CTX* ctxDec = NULL;
    const EVP_CIPHER* evpDec = NULL;

    int tag_len = 16;
    int encLen;
    unsigned char dummy_tag[GCM_AUTH_TAG_LEN] = { 0 };

    const uint8_t key[] = { 0x73, 0xac, 0xb4, 0xfb, 0xef, 0x54, 0x00, 0x4b, 0x33, 0xe6, 0x76, 0xec, 0x34, 0x33, 0x43, 0xad };
    int KeySize = 16;
    
    uint8_t iv1[] = { 0x86, 0x71, 0x11, 0xd2, 0x26, 0x87, 0x5b, 0x2e, 0xb2, 0xe8, 0x87, 0xe3 };
    uint8_t iv2[] = { 0x86, 0x71, 0x11, 0xd2, 0x26, 0x87, 0x5b, 0x2e, 0xb2, 0xe8, 0x87, 0xfe };

    unsigned char aad_4Bytes1[] = { 0x80,0x00,0x00,0x08 };
    unsigned char aad_4Bytes2[] = { 0x80,0x00,0x00,0x15 };

    unsigned char EncPacket1[256] = { 0x9b, 0xcc, 0x00, 0x16, 0x9d, 0x77, 0xc5, 0xc3, 0x7d, 0x57, 0xd9, 0x34, 0x12, 0x6b, 0x71, 0x77, 0xdf, 0x63, 0xae, 0x6b, 0xef, 0xeb, 0x0e, 0xa5, 0xc6, 0xae, 0x7e, 0x64, 0x30, 0x92, 0x84, 0x5e, 0x62, 0x35, 0x00, 0xf0, 0xc5, 0x3e, 0x69, 0x84, 0x33, 0x4c, 0xb2, 0xd0, 0x08, 0xb6, 0x00, 0x8a, 0x4d, 0x7f, 0xb9, 0x75, 0x15, 0x09, 0x2b, 0xb6, 0xd9, 0xc5, 0xdb, 0xc6, 0x43, 0x05, 0x1b, 0x11, 0x26, 0xe4, 0x0f, 0x4b, 0xef, 0xda, 0xd5, 0x7b, 0xe6, 0x75, 0x0a, 0xb5, 0x79, 0x29, 0x94, 0x09, 0x67, 0x49, 0xa1, 0x67, 0x8e, 0x75, 0xdd, 0x96, 0x76, 0xab, 0xbf, 0xe8, 0x0c, 0xc3, 0x3d, 0xc7, 0xd0, 0x88, 0xef, 0xa7, 0x49, 0x76, 0x9d, 0x36, 0x90, 0x4e, 0x1f, 0x1d, 0x80, 0x00, 0x00, 0x08, 0x2f, 0xe8, 0xe7, 0x98 };
    unsigned char EncPacket2[512] = {0x90, 0xcc, 0x00, 0x57, 0x9d, 0x77, 0xc5, 0xc3, 0x00, 0x4a, 0x39, 0xc1, 0x03, 0xaf, 0x6f, 0xaa, 0x2b, 0x1c, 0x3c, 0xef, 0xa6, 0x34, 0x03, 0xc9, 0x69, 0x26, 0xe9, 0xb2, 0xf1, 0x9d, 0x35, 0xac, 0xca, 0x29, 0x06, 0x6a, 0x5c, 0x01, 0x11, 0xe3, 0x3e, 0x67, 0xb6, 0x8f, 0xcc, 0xe4, 0xa1, 0x81, 0x72, 0x20, 0x99, 0x3a, 0xda, 0x39, 0x8d, 0x7f, 0x69, 0xe3, 0x45, 0xb4, 0xa1, 0x4c, 0x2b, 0x0b, 0x04, 0x97, 0xd0, 0x8e, 0x79, 0xab, 0x6a, 0xd5, 0x19, 0x20, 0xa7, 0xc0, 0x2d, 0xf3, 0x54, 0xe4, 0x9a, 0x11, 0x5d, 0x40, 0xd1, 0x24, 0x8f, 0xca, 0x55, 0x88, 0xee, 0xb1, 0x3f, 0x73, 0x88, 0x08, 0x32, 0x63, 0xc2, 0x0a, 0xec, 0xd4, 0x78, 0x0f, 0x97, 0x99, 0xfb, 0xde, 0x68, 0x19, 0xc3, 0xf3, 0x0a, 0x93, 0x60, 0x3e, 0xc1, 0x6c, 0x14, 0x4a, 0xd5, 0xc3, 0x84, 0xf4, 0xaa, 0x66, 0x34, 0x03, 0xb6, 0x93, 0x2f, 0x4d, 0x77, 0xa8, 0x36, 0x5c, 0x18, 0xc9, 0xf6, 0x86, 0x42, 0x79, 0x98, 0x1b, 0x79, 0xff, 0xc8, 0x41, 0x5c, 0x1f, 0xff, 0xf6, 0xba, 0xa7, 0x6b, 0x85, 0xbf, 0x05, 0x73, 0x69, 0x2e, 0x1f, 0x79, 0x45, 0x82, 0x2b, 0xb2, 0xb0, 0x56, 0x1a, 0x58, 0xa5, 0x6f, 0x59, 0xbb, 0x31, 0xd6, 0x52, 0xd9, 0x2a, 0xd2, 0xb1, 0x4d, 0x4c, 0xe8, 0x6e, 0xd0, 0x0d, 0x4f, 0x5d, 0x35, 0x41, 0xc1, 0x06, 0xac, 0x4e, 0x07, 0xca, 0x43, 0xb6, 0x59, 0x65, 0x30, 0x9d, 0x48, 0x33, 0x0d, 0x5a, 0xb9, 0xdf, 0x6d, 0x9f, 0xf7, 0x1d, 0x78, 0x94, 0x15, 0xba, 0xa0, 0xc0, 0x4e, 0x04, 0xa3, 0xf5, 0x38, 0xf3, 0xa5, 0xdf, 0xcf, 0xe4, 0x42, 0xd0, 0x74, 0xd4, 0x80, 0x0e, 0x1b, 0xfc, 0x3b, 0x9c, 0xd9, 0x7c, 0x00, 0x55, 0xdf, 0xed, 0xf4, 0x2c, 0xd7, 0xa0, 0x6f, 0xd6, 0xc7, 0xbe, 0x7d, 0x3c, 0x62, 0x9a, 0x1c, 0xb1, 0xde, 0x16, 0x86, 0xd4, 0xd4, 0x5e, 0xbb, 0x02, 0xdc, 0x50, 0x87, 0x9a, 0xc6, 0x16, 0x90, 0x85, 0x5c, 0x2f, 0x8f, 0x20, 0x5a, 0x14, 0xda, 0x22, 0x38, 0x29, 0x2c, 0x9e, 0xc4, 0x47, 0x9b, 0xd0, 0x42, 0x6c, 0x38, 0x13, 0xa9, 0x99, 0x0e, 0xc8, 0x40, 0xa5, 0xef, 0x3b, 0x6c, 0x92, 0xd0, 0x0d, 0x1d, 0xf9, 0x44, 0xa3, 0x1f, 0xcd, 0x82, 0xa9, 0x0d, 0x1a, 0xad, 0x24, 0x29, 0x2a, 0x8a, 0x4d, 0x4f, 0x33, 0x96, 0xd0, 0x12, 0xde, 0x33, 0x11, 0x6a, 0x85, 0xdb, 0xf8, 0xe3, 0x94, 0xdd, 0x13, 0x3e, 0x17, 0x4a, 0xaa, 0xa0, 0x9f, 0x2a, 0x95, 0x3f, 0x68, 0x83, 0x0e, 0xbf, 0x48, 0x2e, 0x48, 0x46, 0x2c, 0x51, 0x08, 0x45, 0xae, 0x13, 0x73, 0x22, 0x21, 0x61, 0x49, 0x80, 0x00, 0x00, 0x15, 0x2f, 0xe8, 0xe7, 0x98};

    int lenPck1 = 116;
    int lenPck2 = 376;

    unsigned char DecPacket[512] = { 0 };

    unsigned char* AuthTag = NULL;
    //Declaration: End

    Create_Context(&ctxDec);
    Init_Context(ctxDec, &evpDec, key, KeySize);

    // ========================== Decryption START Packet-1 ========================== //

    print_buffer("\nPacket 1 Data (Encrypted by OpenSSL):", EncPacket1, lenPck1);

    encLen = lenPck1 - 32;//aad(8)+AuthTag(16)+aad(4)+Key(4)

    //Setting IV
    if (0 != Set_IV(ctxDec, iv1, 0))
    {
        printf("Set_IV Failed\n");
        return -1;
    }

    //Setting aad : 8 Bytes
    if (0 != Set_aad(ctxDec, EncPacket1, 16, 8, dummy_tag))
    {
        printf("Set_aad_8 Failed\n");
        return -1;
    }

    //Setting aad : 4 Bytes
    if (0 != Set_aad(ctxDec, (unsigned char*)&aad_4Bytes1, 16, 4, dummy_tag))
    {
        printf("Set_aad_4 Failed\n");
        return -1;
    }

    memcpy(DecPacket, EncPacket1, 8);   //Copying First 8 Bytes to Decrypt Buffer
    if (0 != Decrypt_Data(ctxDec, EncPacket1, DecPacket, encLen, tag_len))
    {
        printf("Decryption Failed\n");
        return -1;
    }

    print_buffer("\nPacket 1 Data (Decrypted by WolfSSL):", DecPacket, 8 + encLen);

    //Uncomment for the TestCase:2
    /*
    if (0 != Destroy_Context(ctxDec))
    {
        printf("Decryption Failed\n");
        return -1;
    }
    */

    // ========================== Decryption END Packet-1 ========================== //

    // ========================== Decryption START Packet-2 ========================== //


    //Uncomment for the TestCase:2
    /*
    ctxDec = NULL;
    evpDec = NULL;

    Create_Context(&ctxDec);
    Init_Context(ctxDec, &evpDec, key, KeySize);
    */

    print_buffer("\nPacket 2 Data (Encrypted by OpenSSL):", EncPacket2, lenPck2);

    encLen = lenPck2 - 32;//aad(8)+AuthTag(16)+aad(4)+Key(4)

    //Setting IV
    if (0 != Set_IV(ctxDec, iv2, 0))
    {
        printf("Set_IV Failed\n");
        return -1;
    }

    //Setting aad : 8 Bytes
    if (0 != Set_aad(ctxDec, EncPacket2, 16, 8, dummy_tag))
    {
        printf("Set_aad_8 Failed\n");
        return -1;
    }

    //Setting aad : 4 Bytes
    if (0 != Set_aad(ctxDec, (unsigned char*)&aad_4Bytes2, 16, 4, dummy_tag))
    {
        printf("Set_aad_4 Failed\n");
        return -1;
    }

    memcpy(DecPacket, EncPacket2, 8);   //Copying First 8 Bytes to Decrypt Buffer
    if (0 != Decrypt_Data(ctxDec, EncPacket2, DecPacket, encLen, tag_len))
    {
        printf("Decryption Failed\n");
        return -1;
    }

    print_buffer("\nPacket 2 Data (Decrypted by WolfSSL):", DecPacket, 8 + encLen);

    // ========================== Decryption END Packet-2 ========================== //

    if (0 != Destroy_Context(ctxDec))
    {
        printf("Decryption Failed\n");
        return -1;
    }
}


void Create_Context(EVP_CIPHER_CTX** ctx)
{
    *ctx = EVP_CIPHER_CTX_new();
}

int Init_Context(EVP_CIPHER_CTX* ctx, const EVP_CIPHER** evp, const uint8_t* key, int KeySize)
{
    switch (KeySize) {
    case 32/*SRTP_AES_256_KEY_LEN*/:
        *evp = EVP_aes_256_gcm();
        break;
    case 16/*SRTP_AES_128_KEY_LEN*/:
        *evp = EVP_aes_128_gcm();
        break;
    }

    if (!EVP_CipherInit_ex(ctx, *evp, NULL, key, NULL, 0)) {
        return -1;
    }

    return 0;
}

int Set_IV(EVP_CIPHER_CTX* ctx, uint8_t* iv, int isEncDir)
{
    if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_IVLEN, 12, 0)) {
        return -1;
    }
    if (!EVP_CipherInit_ex(ctx, NULL, NULL, NULL, iv, isEncDir))
    {
        return -1;
    }
    return 0;
}

int Set_aad(EVP_CIPHER_CTX* ctx, unsigned char* inbuf, int tagLen, int addLen, unsigned char dummy_tag[GCM_AUTH_TAG_LEN])
{
    int retVal;
    memset(dummy_tag, 0x0, GCM_AUTH_TAG_LEN);
    EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, tagLen, &dummy_tag);

    retVal = EVP_Cipher(ctx, NULL, inbuf, addLen) == 1 ? addLen : -1;
    if (retVal != addLen) {
        return -1;
    }
    return 0;
}

void Encrypt_Data(EVP_CIPHER_CTX* ctx, unsigned char* inbuf, unsigned char* Outbuf, int encLen, unsigned char* AuthTag, int tag_len)
{
    //Encrypt Data
    EVP_Cipher(ctx, Outbuf, inbuf + 8, encLen);

    // Calculate the tag
    EVP_Cipher(ctx, NULL, NULL, 0);

    // Retreive the tag
    EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_GET_TAG, tag_len, AuthTag);
}

int Decrypt_Data(EVP_CIPHER_CTX* ctx, unsigned char* EncData, unsigned char* DecData, int encLen, int tag_len)
{
    int retVal;

    retVal = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, tag_len, EncData + 8 + encLen);

    retVal = EVP_Cipher(ctx, DecData + 8, EncData + 8, encLen);

    if (0 == retVal)
    {
        printf("\nEVP_Cipher FAILED\n");
        return -1;
    }
    /*
    * Check the tag
    */
    if (EVP_Cipher(ctx, NULL, NULL, 0)) {
        printf("\nTag Check FAILED\n");
        return -1;
    }

    return 0;
}

int Destroy_Context(EVP_CIPHER_CTX* ctx)
{
    if (ctx) {
        EVP_CIPHER_CTX_free(ctx);
    }

    return 0;
}

//Print Buffer in HEX
void print_buffer(const char* name, unsigned char* data, int len)
{
    int i; printf("%s", name); for (i = 0; i < len; i++) { if ((i % 8) == 0) printf("\n "); printf("0x%02x, ", data[i]); } printf("\n");
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   5. In the future, to open this project again, go to File > Open > Project and select the .sln file
